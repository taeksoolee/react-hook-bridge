{"version":3,"file":"index.umd.js","sources":["../src/constaints.ts","../src/useChildWindow.ts","../src/useParentWindow.ts"],"sourcesContent":["export const TYPE_KEY = 'type';\nexport const MESSAGE_KEY = 'bridge';","import { useEffect, useState } from 'react';\nimport { MESSAGE_KEY, TYPE_KEY } from './constaints';\n\ninterface UseChildWindowParams<T> {\n  bridgeKey: string;\n  connectUrl: string;\n  callback: (data: T) => void;\n}\n\ninterface Log<T> {\n  date : Date;\n  message: T;\n}\n\nexport function useChildWindow<T>({\n  bridgeKey, // requirement\n  connectUrl, // requirement\n  callback, // (data) => void \n}: UseChildWindowParams<T>) {\n  // const _window = useRef();\n  const [logs, setLogs] = useState<Log<T>[]>([]);\n\n  useEffect(() => {\n    const opener = window.opener;\n    // _window.current = opener;\n    opener.postMessage({[TYPE_KEY]: bridgeKey}, connectUrl);\n\n    const handler = (e: MessageEvent) => {\n      if(e.origin === connectUrl) {\n        const data = e.data[MESSAGE_KEY];\n        callback && callback(data);\n\n        setLogs([\n          ...logs, {date: new Date(), message: data},\n        ]);\n      }\n    };\n\n    window.addEventListener('message', handler);\n    return () => {\n      window.removeEventListener('message', handler);\n    }\n  }, []);\n\n  return [ logs ];\n}","import { useEffect, useRef } from 'react';\nimport { MESSAGE_KEY, TYPE_KEY } from './constaints';\n\ninterface UseParentWindowParams<T> {\n  bridgeKey: string;\n  connectUrl: string;\n  getData: () => T;\n};\n\nexport function useParentWindow<T>({\n  bridgeKey, // requirement\n  connectUrl, // requirement\n  getData, \n}: UseParentWindowParams<T>) {\n  // !getData && console.warn('useParentWindow : getData in params is undefeined');\n  // !connectUrl && console.warn('useParentWindow : connectUrl in params is undefeined');\n\n  // bridgeKey = bridgeKey || 'bridgeKey';\n\n  const _window = useRef<Window | null>(null);\n\n  const open = () => {\n    _window.current = window.open(connectUrl);\n  }\n\n  const close = () => {\n    _window.current?.close();\n  }\n\n  useEffect(() => {\n    const handler = (e: MessageEvent) => {\n      e.origin === connectUrl \n        && e.data[TYPE_KEY] === bridgeKey\n          && getData && _window.current?.postMessage({[MESSAGE_KEY]: getData()}, connectUrl);\n    };\n\n    window.addEventListener('message', handler);\n    return () => {\n      window.removeEventListener('message', handler);\n    }\n  }, []);\n\n  return [ open, close ];\n}"],"names":["TYPE_KEY","MESSAGE_KEY","bridgeKey","connectUrl","callback","logs","setLogs","useState","useEffect","window","opener","postMessage","handler","e","origin","data","date","Date","message","addEventListener","removeEventListener","getData","_window","useRef","current","_a","open","close"],"mappings":"wRAAO,MAAMA,EAAW,OACXC,EAAc,oCCaOC,UAChCA,EAASC,WACTA,EAAUC,SACVA,IAGA,MAAOC,EAAMC,GAAWC,EAAQA,SAAW,IAwB3C,OAtBAC,EAAAA,WAAU,KACOC,OAAOC,OAEfC,YAAY,CAACX,CAACA,GAAWE,GAAYC,GAE5C,MAAMS,EAAWC,IACf,GAAGA,EAAEC,SAAWX,EAAY,CAC1B,MAAMY,EAAOF,EAAEE,KAAgB,OAC/BX,GAAYA,EAASW,GAErBT,EAAQ,IACHD,EAAM,CAACW,KAAM,IAAIC,KAAQC,QAASH,OAM3C,OADAN,OAAOU,iBAAiB,UAAWP,GAC5B,KACLH,OAAOW,oBAAoB,UAAWR,MAEvC,IAEI,CAAEP,gCCnCwBH,UACjCA,EAASC,WACTA,EAAUkB,QACVA,IAOA,MAAMC,EAAUC,SAAsB,MAuBtC,OAbAf,EAAAA,WAAU,KACR,MAAMI,EAAWC,UACfA,EAAEC,SAAWX,GACRU,EAAEE,KAAa,OAAMb,GACnBmB,IAA4B,UAAjBC,EAAQE,eAAS,IAAAC,GAAAA,EAAAd,YAAY,CAACV,CAACA,GAAcoB,KAAYlB,KAI7E,OADAM,OAAOU,iBAAiB,UAAWP,GAC5B,KACLH,OAAOW,oBAAoB,UAAWR,MAEvC,IAEI,CArBM,KACXU,EAAQE,QAAUf,OAAOiB,KAAKvB,IAGlB,WACK,QAAjBsB,EAAAH,EAAQE,eAAS,IAAAC,GAAAA,EAAAE"}